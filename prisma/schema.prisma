// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./database.db"
}

model User {
  id            String @default(uuid()) @id
  name          String
  password      String

  // We give the default user Admin role -> Set to 1 for assistant
  role          Int       @default(0)
  experiment    Experiment[]
}



// Main Experiment Model. Includes a question array and demographics.
// NOTE: We are still missing a way to copy a experiment / a different variant.
//  This could be done by adding a variant table which includes a Question[] and experiment then includes a variant[] instead
// Or we simply call the new version a whole new experiment and copy the entire experiment. 
model Experiment {
  id                     String      @id @default(uuid())

  // Linking it to a user 
  user                   User   @relation(fields: [userId], references: [id])
  userId                 String

  title                  String
  description            String?

  questions              Question[]
  participantAnswers     TotalAnswer[]
}

// Define the Question model
model Question {
  id                    String       @id @default(uuid())
  experiment            Experiment   @relation(fields: [experimentId], references: [id])
  experimentId          String

  questionText          String
  questionImage         String? // Probably needs to be a different type dont know how to store Images currently 

  // Establish a one-to-many relationship with the Option and QuestionAnswer model
  options               Option[]
  questionAnswers       QuestionAnswer[]
}


// Define the Option model - still needs to be worked on
model Option {
  id                  String      @id @default(uuid())
  question            Question @relation(fields: [questionId], references: [id])
  questionId          String 

  optionType          String // If its a dropdown, text-field, checkbox - one way we can keep track of what and where to save answer data
  optionText          String
}





// Table which models exactly what we need to output to .csv
model TotalAnswer {
  id                  String  @id @default(uuid())
  experiment          Experiment  @relation(fields: [experimentId], references: [id])
  experimentId        String

  demographics        Demographics?
  demographicsId      String
  questionAnswers     QuestionAnswer[]

}

// Demographics needed for the total Answer
model Demographics {
  id                  String @id @default(uuid())
  gender              String
  age                 Int
  country             String

  completeAnswerId    String @unique
  completeAnswer      TotalAnswer @relation(fields: [completeAnswerId], references: [id])
}


// This is an answer to a specific question in the experiment - probably needs to be restructured based on what we implement
model QuestionAnswer {
  id                  String       @id @default(uuid())
  question            Question  @relation(fields: [questionId], references: [id])
  questionId          String

  completeAnswer      TotalAnswer  @relation(fields: [completeAnswerId], references: [id])
  completeAnswerId    String

  // We would have to manually set these on the frontend based on where the participant inputs stuff.
  // We can do this by having a direct link to a specific question, which has access to all options. 
  optionType          String
  optionText          String    
  response            String
}
